---
title: "Transform Data"
---

```{r}
#| label: setup
library(tidyverse)
library(here)

# Toy datasets to use

pollution <- tribble(
       ~city,   ~size, ~amount, 
  "New York", "large",      23,
  "New York", "small",      14,
    "London", "large",      22,
    "London", "small",      16,
   "Beijing", "large",      121,
   "Beijing", "small",      56
)

# library(babynames)
```

# Import Data using {here} package

## Your Turn 1

Import the `babynames.csv` data set, which is in the `03-Transform` folder, as `babynames`. Does it run?

```{r}
babynames <- here("03-Transform/babynames.csv") |> read.csv()

```

```{r}
babynames
```

# dplyr

## Your Turn 2

Alter the code to select just the `n` column:

```{r}
select(babynames, name, prop)

babynames |> 
  select(name, prop)
```

## Quiz

Which of these is NOT a way to select the `name` and `n` columns together?

```{r}
babynames |> select(-c(year, sex, prop))
babynames |> select(name:n)
babynames |> select(starts_with("n"))
babynames |> select(ends_with("n"))
```

## Your Turn 3

Use `filter`, `babynames`, and the logical operators to find:

* All of the names where prop is greater than or equal to 0.08  
* All of the children named "Sea"  

```{r}

```

## Your Turn 4

Use Boolean operators to return only the rows that contain:

* _Boys_ named Sue  
* Names that were used by exactly 5 or 6 children in 1880  
* Names that are one of Acura, Lexus, or Yugo

```{r}

```

## Help Me

What is the smallest value of n?
What is the largest?

```{r}

```

## Your Turn 5

Use `|>` to write a sequence of functions that: 

1. Filters babynames to just the girls that were born in 2017, *then...*  
2. Selects the `name` and `n` columns, *then...*  
3. Arranges the results so that the most popular names are near the top.

```{r}

```

## Your Turn 6 - Exam

1. Trim `babynames` to just the rows that contain your `name` and your `sex`  
2. Trim the result to just the columns that will appear in your graph (not strictly necessary, but useful practice)  
3. Plot the results as a line graph with `year` on the x axis and `prop` on the y axis

```{r}

```

## Your Turn 7

Copmplete the code below to extract the rows where `name == "Khaleesi"`. Then use `summarise()` and `sum()` and `min()` to find:

1. The total number of children named Khaleesi
2. The first year Khaleesi appeared in the data

*(Hint: Be sure to remove each `_` before running the code)*

```{r}
babynames ___ 
  filter(_______________________) ___
  ___________(total = ________, first = _______)
```

## Your Turn 8

Use `group_by()`, `summarise()`, and `arrange()` to display the ten most popular names. Compute popularity as the *total* number of children of a single gender given a name.

*(Hint: Be sure to remove each `_` before running the code)*

```{r}
babynames |>
  _______(name, sex) |> 
  _______(total = _____(n)) |> 
  _______(desc(_____))
```

## Your Turn 9

Use `group_by()` to calculate and then plot the total number of children born each year over time.

```{r}

```

## Your Turn 10

Use `mutate()` and `min_rank()`to rank each row in babynames from _largest_ n to lowest n.

*(Hint: Be sure to remove each `_` before running the code)*

```{r}
babynames |> 
  ______(rank = _______(____(prop)))
```

## Your Turn 11

Group babynames by **year** and then re-rank the data. Filter the results to just rows where **rank == 1**.

```{r}

```

***

# Take aways

* Extract variables with `select()`  
* Extract cases with `filter()`  
* Arrange cases, with `arrange()`  

* Make tables of summaries with `summarise()`  
* Make new variables, with `mutate()`  
* Do groupwise operations with `group_by()`

* Connect operations with `|>`  

